---
AWSTemplateFormatVersion: '2010-09-09'
Description: Simple EC2 Template

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
          - Label: {default: 'EC2 Parameters'}
            Parameters:
              - InstanceType
              - KeyName
          - Label: {default: 'Network Stack'}
            Parameters:
              - AuthorizedCidrIp
              - VpcId
              - SubnetId

Parameters:
    InstanceType:
        Description: 'WebServer EC2 instance type.'
        Type: String
        ConstraintDescription: 'must be a valid EC2 instance type.'
        Default: 't2.micro'
        AllowedValues:
          - 't2.micro'
          - 't2.nano'
          - 't2.micro'
          - 't2.small'
          - 't2.medium'
          - 't2.large'
          - 'm1.small'
          - 'm1.medium'
          - 'm1.large'
          - 'm1.xlarge'
          - 'm2.xlarge'
          - 'm2.2xlarge'
          - 'm2.4xlarge'
          - 'm3.medium'
          - 'm3.large'
          - 'm3.xlarge'
          - 'm3.2xlarge'
          - 'm4.large'
          - 'm4.xlarge'
          - 'm4.2xlarge'
          - 'm4.4xlarge'
          - 'm4.10xlarge'
          - 'c1.medium'
          - 'c1.xlarge'
          - 'c3.large'
          - 'c3.xlarge'
          - 'c3.2xlarge'
          - 'c3.4xlarge'
          - 'c3.8xlarge'
          - 'c4.large'
          - 'c4.xlarge'
          - 'c4.2xlarge'
          - 'c4.4xlarge'
          - 'c4.8xlarge'
          - 'g2.2xlarge'
          - 'g2.8xlarge'
          - 'r3.large'
          - 'r3.xlarge'
          - 'r3.2xlarge'
          - 'r3.4xlarge'
          - 'r3.8xlarge'
          - 'i2.xlarge'
          - 'i2.2xlarge'
          - 'i2.4xlarge'
          - 'i2.8xlarge'
          - 'd2.xlarge'
          - 'd2.2xlarge'
          - 'd2.4xlarge'
          - 'd2.8xlarge'
          - 'h1.4xlarge'
          - 'hs1.8xlarge'
          - 'cr1.8xlarge'
          - 'cc2.8xlarge'
    KeyName:
        Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instances'
        Type: AWS::EC2::KeyPair::KeyName
        ConstraintDescription: 'must be the name of an existing EC2 KeyPair.'
    AuthorizedCidrIp:
        Description: 'The IP address range that can be used to SSH to the EC2 instances.'
        Type: String
        ConstraintDescription: 'must be a valid IP CIDR range of the form x.x.x.x/x'
        MinLength: 9
        MaxLength: 18
        Default: '0.0.0.0/0'
        AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    VpcId:
        Description: 'VpcId for the instance'
        Type: AWS::EC2::VPC::Id
        ConstraintDescription: 'must be the name of an existing Vpc.'
    SubnetId:
        Description: 'SubnetId for the instance'
        Type: AWS::EC2::Subnet::Id
        ConstraintDescription: 'must be the name of an existing Subnet.'

Mappings:
    RegionMap:
        "ap-northeast-1": {"AMI": "ami-0c3fd0f5d33134a76"}
        "ap-northeast-2": {"AMI": "ami-095ca789e0549777d"}
        "ap-south-1": {"AMI": "ami-0d2692b6acea72ee6"}
        "ap-southeast-1": {"AMI": "ami-01f7527546b557442"}
        "ap-southeast-2": {"AMI": "ami-0dc96254d5535925f"}
        "ca-central-1": {"AMI": "ami-0d4ae09ec9361d8ac"}
        "eu-central-1": {"AMI": "ami-0cc293023f983ed53"}
        "eu-north-1": {"AMI": "ami-3f36be41"}
        "eu-west-1": {"AMI": "ami-0bbc25e23a7640b9b"}
        "eu-west-2": {"AMI": "ami-0d8e27447ec2c8410"}
        "eu-west-3": {"AMI": "ami-0adcddd3324248c4c"}
        "sa-east-1": {"AMI": "ami-058943e7d9b9cabfb"}
        "us-east-1": {"AMI": "ami-0b898040803850657"}
        "us-east-2": {"AMI": "ami-0d8f6eb4f641ef691"}
        "us-west-1": {"AMI": "ami-056ee704806822732"}
        "us-west-2": {"AMI": "ami-082b5a644766e0e6f"}

Resources:
    ######################
    # Instance
    ######################
    Instance:
        DependsOn: EIPAssociation
        Type: AWS::EC2::Instance
        Metadata:
            AWS::CloudFormation::Init:
                configSets:
                    default:
                      - configure_nginx
                      - configure_cfn
                configure_cfn:
                    files:
                        /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource Instance --configsets default
                            mode: "000400"
                            owner: root
                            group: root
                        /etc/cfn/cfn-hup.conf:
                            content: !Sub |
                                [main]
                                region=${AWS::Region}
                                stack=${AWS::StackId}
                                verbose=true
                                interval=1
                            mode: "000400"
                            owner: root
                            group: root
                    services:
                        sysvinit:
                            amazon-ssm-agent:
                                enabled: true
                                ensureRunning: true
                            cfn-hup:
                                enabled: true
                                ensureRunning: true
                                files:
                                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                  - "/etc/cfn/cfn-hup.conf"
                configure_nginx:
                    packages:
                        yum:
                            nginx: []
                    files:
                        /usr/share/nginx/html/index.html:
                            content: |
                                hello nurse
                            mode: '000644'
                            owner: 'root'
                            group: 'root'
                    services:
                        sysvinit:
                            nginx:
                                enabled: true
                                ensureRunning: true
                                sources:
                                    - /usr/share/nginx/html/
                                files:
                                    - /etc/nginx/conf.d/default.conf
                                    - /etc/nginx/nginx.conf
        CreationPolicy:
            ResourceSignal:
                Timeout: PT10M
                Count: 1
        Properties:
            InstanceType: !Ref InstanceType
            ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
            KeyName: !Ref KeyName
            IamInstanceProfile: !Ref InstanceProfile
            SourceDestCheck: false
            NetworkInterfaces:
              - NetworkInterfaceId: !Ref NetworkInterface
                DeviceIndex: '0'
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash bash -Eeuxo pipefail
                    #
                    trap '/opt/aws/bin/cfn-signal -e 1 --region ${AWS::Region} --stack ${AWS::StackName} --resource Instance' ERR
                    #
                    /opt/aws/bin/cfn-init -v \
                        --region ${AWS::Region} \
                        --stack ${AWS::StackName} \
                        --resource Instance \
                        --configsets default
                    /opt/aws/bin/cfn-signal -e 0 \
                        --region ${AWS::Region} \
                        --stack ${AWS::StackName}
                        --resource Instance
            Tags:
                - {Key: Name, Value: !Sub '${AWS::StackName}'}

    ######################
    # Networkking
    ######################
    NetworkInterface:
        Type: AWS::EC2::NetworkInterface
        Properties:
            Description: !Sub '${AWS::StackName}'
            SubnetId: !Ref SubnetId
            GroupSet:
              - !Ref SecurityGroupHTTPS
              - !Ref SecurityGroupSSH
            Tags:
                - {Key: Name, Value: !Sub '${AWS::StackName}'}
    SecurityGroupHTTPS:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Sub '${AWS::StackName} HTTP/S'
            VpcId: !Ref VpcId
            SecurityGroupIngress:
              - {Description: "HTTPS all access", IpProtocol: tcp, FromPort: 443, ToPort: 443, CidrIp: 0.0.0.0/0}
              - {Description: "HTTP all access", IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0}
            Tags:
                - {Key: Name, Value: !Sub '${AWS::StackName} HTTP/S'}
    SecurityGroupSSH:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Sub '${AWS::StackName} SSH'
            VpcId: !Ref VpcId
            SecurityGroupIngress:
              - {Description: "SSH authorized access", IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: !Ref AuthorizedCidrIp}
            Tags:
                - {Key: Name, Value: !Sub '${AWS::StackName} SSH'}
    IPAddress:
        Type: AWS::EC2::EIP
        Properties:
            Domain: vpc
    EIPAssociation:
        Type: AWS::EC2::EIPAssociation
        Properties:
            AllocationId: !GetAtt IPAddress.AllocationId
            NetworkInterfaceId: !Ref NetworkInterface

    ######################
    # IAM
    ######################
    InstanceProfile:
        Type: 'AWS::IAM::InstanceProfile'
        Properties:
            Roles:
              - !Ref InstanceProfileRole
    InstanceProfileRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Action:
                      - 'sts:AssumeRole'
                    Effect: Allow
                    Principal:
                        Service:
                          - 'ec2.amazonaws.com'
            Policies:
              - PolicyName: ssm
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - 'ssmmessages:*'
                          - 'ssm:UpdateInstanceInformation'
                          - 'ec2messages:*'
                        Resource: '*'
              - PolicyName: s3
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - 's3:*'
                        Resource: '*'

Outputs:
    InstanceId:
        Description: 'The EC2 instance id.'
        Value: !Ref Instance
        Export:
            Name: !Sub '${AWS::StackName}-InstanceId'
    IPAddress:
        Description: 'The public IP address of the EC2 instance.'
        Value: !Ref IPAddress
        Export:
            Name: !Sub '${AWS::StackName}-IPAddress'
    PrivateIPAddress:
        Description: 'The private IP address of the EC2 instance.'
        Value: !GetAtt 'NetworkInterface.PrimaryPrivateIpAddress'
        Export:
            Name: !Sub '${AWS::StackName}-PrivateIPAddress'
