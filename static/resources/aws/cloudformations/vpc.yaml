---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: Public and Private subnets in two availability zones'

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
          - Label: {default: 'VPC Parameters'}
            Parameters:
              - ClassB

Parameters:
    ClassB:
        Description: 'Class B of VPC (10.XXX.0.0/16)'
        Type: Number
        ConstraintDescription: 'Must be in the range [0-255]'
        Default: 0
        MinValue: 0
        MaxValue: 255

Mappings: {}

Conditions: {}

Resources:
    ######################
    # VPC
    ######################
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Sub '10.${ClassB}.0.0/16'
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: default
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} VPC'}
              - {Key: ClassB, Value: !Sub '10.${ClassB}.0.0/16'}
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Internet Gateway'}
    VPCGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref VPC
            InternetGatewayId: !Ref InternetGateway

    ######################
    # Public ACL
    ######################
    PublicNetworkAcl:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId: !Ref VPC
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Public Acl'}
    PublicNetworkAclEntryIngressAllowAll:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PublicNetworkAcl
            RuleNumber: 99
            Protocol: -1
            RuleAction: allow
            Egress: false
            CidrBlock: '0.0.0.0/0'
    PublicNetworkAclEntryEgressAllowAll:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PublicNetworkAcl
            RuleNumber: 99
            Protocol: -1
            RuleAction: allow
            Egress: true
            CidrBlock: '0.0.0.0/0'

    ######################
    # Private ACL
    ######################
    PrivateNetworkAcl:
        Type: AWS::EC2::NetworkAcl
        Properties:
            VpcId: !Ref VPC
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Private Acl'}
    PrivateNetworkAclEntryIngressAllowVPC:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PrivateNetworkAcl
            RuleNumber: 99
            Protocol: -1
            RuleAction: allow
            Egress: false
            CidrBlock: '0.0.0.0/0'
    PrivateNetworkAclEntryEgressAllowVPC:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
            NetworkAclId: !Ref PrivateNetworkAcl
            RuleNumber: 99
            Protocol: -1
            RuleAction: allow
            Egress: true
            CidrBlock: '0.0.0.0/0'

    ############################
    # Public Subnet 1
    ############################
    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Sub '10.${ClassB}.0.0/20'
            MapPublicIpOnLaunch: true
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Public Subnet (AZ1)'}
    PublicRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Public Routes (AZ1)'}
    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable1
            SubnetId: !Ref PublicSubnet1
    PublicSubnet1NetworkAclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PublicSubnet1
            NetworkAclId: !Ref PublicNetworkAcl
    PublicRouteInternetGateway1:
        Type: AWS::EC2::Route
        DependsOn: VPCGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable1
            DestinationCidrBlock: '0.0.0.0/0'
            GatewayId: !Ref InternetGateway

    ############################
    # Public Subnet 2
    ############################
    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Sub '10.${ClassB}.32.0/20'
            MapPublicIpOnLaunch: true
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Public Subnet (AZ2)'}
    PublicRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Public Routes (AZ2)'}
    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable2
            SubnetId: !Ref PublicSubnet2
    PublicSubnet2NetworkAclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PublicSubnet2
            NetworkAclId: !Ref PublicNetworkAcl
    PublicRouteInternetGateway2:
        Type: AWS::EC2::Route
        DependsOn: VPCGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable2
            DestinationCidrBlock: '0.0.0.0/0'
            GatewayId: !Ref InternetGateway

    ############################
    # Public Subnet 3
    ############################
    PublicSubnet3:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 2, !GetAZs '' ]
            CidrBlock: !Sub '10.${ClassB}.64.0/20'
            MapPublicIpOnLaunch: true
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Public Subnet (AZ3)'}
    PublicRouteTable3:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Public Routes (AZ3)'}
    PublicSubnet3RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable3
            SubnetId: !Ref PublicSubnet3
    PublicSubnet3NetworkAclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PublicSubnet3
            NetworkAclId: !Ref PublicNetworkAcl
    PublicRouteInternetGateway3:
        Type: AWS::EC2::Route
        DependsOn: VPCGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable3
            DestinationCidrBlock: '0.0.0.0/0'
            GatewayId: !Ref InternetGateway

    ############################
    # Private Subnet 1
    ############################
    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Sub '10.${ClassB}.16.0/20'
            MapPublicIpOnLaunch: false
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Private Subnet (AZ1)'}
    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Private Routes (AZ1)'}
    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1
    PrivateSubnet1NetworkAclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet1
            NetworkAclId: !Ref PrivateNetworkAcl
    # NatGateway
    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: VPCGatewayAttachment
        Properties:
            Domain: vpc
    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Nat Gateway (AZ1)'}
    PrivateRouteNatGateway1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: '0.0.0.0/0'
            NatGatewayId: !Ref NatGateway1

    ############################
    # Private Subnet 2
    ############################
    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Sub '10.${ClassB}.48.0/20'
            MapPublicIpOnLaunch: true
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Private Subnet (AZ2)'}
    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Private Routes (AZ2)'}
    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2
    PrivateSubnet2NetworkAclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet2
            NetworkAclId: !Ref PrivateNetworkAcl
    # NatGateway
    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: VPCGatewayAttachment
        Properties:
            Domain: vpc
    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Nat Gateway (AZ2)'}
    PrivateRouteNatGateway2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: '0.0.0.0/0'
            NatGatewayId: !Ref NatGateway2


    ############################
    # Private Subnet 3
    ############################
    PrivateSubnet3:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 2, !GetAZs '' ]
            CidrBlock: !Sub '10.${ClassB}.80.0/20'
            MapPublicIpOnLaunch: true
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Private Subnet (AZ3)'}
    PrivateRouteTable3:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Private Routes (AZ3)'}
    PrivateSubnet3RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable3
            SubnetId: !Ref PrivateSubnet3
    PrivateSubnet3NetworkAclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        Properties:
            SubnetId: !Ref PrivateSubnet3
            NetworkAclId: !Ref PrivateNetworkAcl
    # NatGateway
    NatGateway3EIP:
        Type: AWS::EC2::EIP
        DependsOn: VPCGatewayAttachment
        Properties:
            Domain: vpc
    NatGateway3:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway3EIP.AllocationId
            SubnetId: !Ref PublicSubnet3
            Tags:
              - {Key: Name, Value: !Sub '${AWS::StackName} Nat Gateway (AZ3)'}
    PrivateRouteNatGateway3:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable3
            DestinationCidrBlock: '0.0.0.0/0'
            NatGatewayId: !Ref NatGateway3

Outputs:
    AZ1:
        Description: 'AZ of 1'
        Value: !Select [0, !GetAZs '']
        Export: {Name: !Sub '${AWS::StackName}-AZA'}
    AZ2:
        Description: 'AZ of 2'
        Value: !Select [1, !GetAZs '']
        Export: {Name: !Sub '${AWS::StackName}-AZB'}
    AZ3:
        Description: 'AZ of 3'
        Value: !Select [2, !GetAZs '']
        Export: {Name: !Sub '${AWS::StackName}-AZC'}
    AZs:
        Description: 'AZs'
        Value: 3
        Export: {Name: !Sub '${AWS::StackName}-AZs'}
    CidrBlock:
        Description: 'The set of IP addresses for the VPC.'
        Value: !GetAtt 'VPC.CidrBlock'
        Export: {Name: !Sub '${AWS::StackName}-CidrBlock'}
    VPC:
        Description: 'VPC.'
        Value: !Ref VPC
        Export: {Name: !Sub '${AWS::StackName}-VPC'}

    ######################
    # Public
    ######################
    SubnetsPublic:
        Description: 'Subnets public.'
        Value: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
        Export: {Name: !Sub '${AWS::StackName}-SubnetsPublic'}
    RouteTablesPublic:
        Description: 'Route tables public.'
        Value: !Join [',', [!Ref PublicRouteTable1, !Ref PublicRouteTable2, !Ref PublicRouteTable3]]
        Export: {Name: !Sub '${AWS::StackName}-RouteTablesPublic'}

    ######################
    # Private
    ######################
    SubnetsPrivate:
        Description: 'Subnets private.'
        Value: !Join [',', [!Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3]]
        Export: {Name: !Sub '${AWS::StackName}-SubnetsPrivate'}
    RouteTablesPrivate:
        Description: 'Route tables private.'
        Value: !Join [',', [!Ref PrivateRouteTable1, !Ref PrivateRouteTable2, !Ref PrivateRouteTable3]]
        Export: {Name: !Sub '${AWS::StackName}-RouteTablesPrivate'}

    ######################
    # AZ 1
    ######################
    PublicSubnet1:
        Description: 'Subnet 1 public.'
        Value: !Ref PublicSubnet1
        Export: {Name: !Sub '${AWS::StackName}-PublicSubnet1'}
    PublicRouteTable1:
        Description: 'Route table 1 public.'
        Value: !Ref PublicRouteTable1
        Export: {Name: !Sub '${AWS::StackName}-PublicRouteTable1'}
    PrivateSubnet1:
        Description: 'Subnet 1 Private.'
        Value: !Ref PrivateSubnet1
        Export: {Name: !Sub '${AWS::StackName}-PrivateSubnet1'}
    PrivateRouteTable1:
        Description: 'Route table 1 Private.'
        Value: !Ref PrivateRouteTable1
        Export: {Name: !Sub '${AWS::StackName}-PrivateRouteTable1'}

    ######################
    # AZ 2
    ######################
    PublicSubnet2:
        Description: 'Subnet 2 public.'
        Value: !Ref PublicSubnet2
        Export: {Name: !Sub '${AWS::StackName}-PublicSubnet2'}
    PublicRouteTable2:
        Description: 'Route table 2 public.'
        Value: !Ref PublicRouteTable2
        Export: {Name: !Sub '${AWS::StackName}-PublicRouteTable2'}
    PrivateSubnet2:
        Description: 'Subnet 2 private.'
        Value: !Ref PrivateSubnet2
        Export: {Name: !Sub '${AWS::StackName}-PrivateSubnet2'}
    PrivateRouteTable2:
        Description: 'Route table 2 private.'
        Value: !Ref PrivateRouteTable2
        Export: {Name: !Sub '${AWS::StackName}-PrivateRouteTable2'}

    ######################
    # AZ 3
    ######################
    PublicSubnet3:
        Description: 'Subnet 3 public.'
        Value: !Ref PublicSubnet3
        Export: {Name: !Sub '${AWS::StackName}-PublicSubnet3'}
    PublicRouteTable3:
        Description: 'Route table 3 public.'
        Value: !Ref PublicRouteTable3
        Export: {Name: !Sub '${AWS::StackName}-PublicRouteTable3'}
    PrivateSubnet3:
        Description: 'Subnet 3 private.'
        Value: !Ref PrivateSubnet3
        Export: {Name: !Sub '${AWS::StackName}-PrivateSubnet3'}
    PrivateRouteTable3:
        Description: 'Route table 3 private.'
        Value: !Ref PrivateRouteTable3
        Export: {Name: !Sub '${AWS::StackName}-PrivateRouteTable3'}
